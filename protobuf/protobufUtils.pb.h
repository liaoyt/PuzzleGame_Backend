// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobufUtils.proto

#ifndef PROTOBUF_protobufUtils_2eproto__INCLUDED
#define PROTOBUF_protobufUtils_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobufUtils {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protobufUtils_2eproto();
void protobuf_AssignDesc_protobufUtils_2eproto();
void protobuf_ShutdownFile_protobufUtils_2eproto();

class PGRequest;
class PGRequest_RankInfo;
class PGImage;

// ===================================================================

class PGRequest_RankInfo : public ::google::protobuf::Message {
 public:
  PGRequest_RankInfo();
  virtual ~PGRequest_RankInfo();

  PGRequest_RankInfo(const PGRequest_RankInfo& from);

  inline PGRequest_RankInfo& operator=(const PGRequest_RankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PGRequest_RankInfo& default_instance();

  void Swap(PGRequest_RankInfo* other);

  // implements Message ----------------------------------------------

  PGRequest_RankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PGRequest_RankInfo& from);
  void MergeFrom(const PGRequest_RankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string myRank = 1;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 1;
  inline const ::std::string& myrank() const;
  inline void set_myrank(const ::std::string& value);
  inline void set_myrank(const char* value);
  inline void set_myrank(const char* value, size_t size);
  inline ::std::string* mutable_myrank();
  inline ::std::string* release_myrank();
  inline void set_allocated_myrank(::std::string* myrank);

  // repeated string topUser = 2;
  inline int topuser_size() const;
  inline void clear_topuser();
  static const int kTopUserFieldNumber = 2;
  inline const ::std::string& topuser(int index) const;
  inline ::std::string* mutable_topuser(int index);
  inline void set_topuser(int index, const ::std::string& value);
  inline void set_topuser(int index, const char* value);
  inline void set_topuser(int index, const char* value, size_t size);
  inline ::std::string* add_topuser();
  inline void add_topuser(const ::std::string& value);
  inline void add_topuser(const char* value);
  inline void add_topuser(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topuser() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topuser();

  // repeated string topScore = 3;
  inline int topscore_size() const;
  inline void clear_topscore();
  static const int kTopScoreFieldNumber = 3;
  inline const ::std::string& topscore(int index) const;
  inline ::std::string* mutable_topscore(int index);
  inline void set_topscore(int index, const ::std::string& value);
  inline void set_topscore(int index, const char* value);
  inline void set_topscore(int index, const char* value, size_t size);
  inline ::std::string* add_topscore();
  inline void add_topscore(const ::std::string& value);
  inline void add_topscore(const char* value);
  inline void add_topscore(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topscore() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topscore();

  // @@protoc_insertion_point(class_scope:protobufUtils.PGRequest.RankInfo)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* myrank_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topuser_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topscore_;
  friend void  protobuf_AddDesc_protobufUtils_2eproto();
  friend void protobuf_AssignDesc_protobufUtils_2eproto();
  friend void protobuf_ShutdownFile_protobufUtils_2eproto();

  void InitAsDefaultInstance();
  static PGRequest_RankInfo* default_instance_;
};
// -------------------------------------------------------------------

class PGRequest : public ::google::protobuf::Message {
 public:
  PGRequest();
  virtual ~PGRequest();

  PGRequest(const PGRequest& from);

  inline PGRequest& operator=(const PGRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PGRequest& default_instance();

  void Swap(PGRequest* other);

  // implements Message ----------------------------------------------

  PGRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PGRequest& from);
  void MergeFrom(const PGRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PGRequest_RankInfo RankInfo;

  // accessors -------------------------------------------------------

  // required string Code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string errorInfo = 2;
  inline bool has_errorinfo() const;
  inline void clear_errorinfo();
  static const int kErrorInfoFieldNumber = 2;
  inline const ::std::string& errorinfo() const;
  inline void set_errorinfo(const ::std::string& value);
  inline void set_errorinfo(const char* value);
  inline void set_errorinfo(const char* value, size_t size);
  inline ::std::string* mutable_errorinfo();
  inline ::std::string* release_errorinfo();
  inline void set_allocated_errorinfo(::std::string* errorinfo);

  // optional string username = 3;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 3;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline const ::std::string& score() const;
  inline void set_score(const ::std::string& value);
  inline void set_score(const char* value);
  inline void set_score(const char* value, size_t size);
  inline ::std::string* mutable_score();
  inline ::std::string* release_score();
  inline void set_allocated_score(::std::string* score);

  // repeated string pictures = 6;
  inline int pictures_size() const;
  inline void clear_pictures();
  static const int kPicturesFieldNumber = 6;
  inline const ::std::string& pictures(int index) const;
  inline ::std::string* mutable_pictures(int index);
  inline void set_pictures(int index, const ::std::string& value);
  inline void set_pictures(int index, const char* value);
  inline void set_pictures(int index, const char* value, size_t size);
  inline ::std::string* add_pictures();
  inline void add_pictures(const ::std::string& value);
  inline void add_pictures(const char* value);
  inline void add_pictures(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& pictures() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pictures();

  // optional string pictureDate = 7;
  inline bool has_picturedate() const;
  inline void clear_picturedate();
  static const int kPictureDateFieldNumber = 7;
  inline const ::std::string& picturedate() const;
  inline void set_picturedate(const ::std::string& value);
  inline void set_picturedate(const char* value);
  inline void set_picturedate(const char* value, size_t size);
  inline ::std::string* mutable_picturedate();
  inline ::std::string* release_picturedate();
  inline void set_allocated_picturedate(::std::string* picturedate);

  // optional .protobufUtils.PGRequest.RankInfo rankInfo = 8;
  inline bool has_rankinfo() const;
  inline void clear_rankinfo();
  static const int kRankInfoFieldNumber = 8;
  inline const ::protobufUtils::PGRequest_RankInfo& rankinfo() const;
  inline ::protobufUtils::PGRequest_RankInfo* mutable_rankinfo();
  inline ::protobufUtils::PGRequest_RankInfo* release_rankinfo();
  inline void set_allocated_rankinfo(::protobufUtils::PGRequest_RankInfo* rankinfo);

  // optional string nickname = 9;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 9;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:protobufUtils.PGRequest)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_errorinfo();
  inline void clear_has_errorinfo();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_picturedate();
  inline void clear_has_picturedate();
  inline void set_has_rankinfo();
  inline void clear_has_rankinfo();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* code_;
  ::std::string* errorinfo_;
  ::std::string* username_;
  ::std::string* password_;
  ::std::string* score_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pictures_;
  ::std::string* picturedate_;
  ::protobufUtils::PGRequest_RankInfo* rankinfo_;
  ::std::string* nickname_;
  friend void  protobuf_AddDesc_protobufUtils_2eproto();
  friend void protobuf_AssignDesc_protobufUtils_2eproto();
  friend void protobuf_ShutdownFile_protobufUtils_2eproto();

  void InitAsDefaultInstance();
  static PGRequest* default_instance_;
};
// -------------------------------------------------------------------

class PGImage : public ::google::protobuf::Message {
 public:
  PGImage();
  virtual ~PGImage();

  PGImage(const PGImage& from);

  inline PGImage& operator=(const PGImage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PGImage& default_instance();

  void Swap(PGImage* other);

  // implements Message ----------------------------------------------

  PGImage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PGImage& from);
  void MergeFrom(const PGImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string opt = 4;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 4;
  inline const ::std::string& opt() const;
  inline void set_opt(const ::std::string& value);
  inline void set_opt(const char* value);
  inline void set_opt(const char* value, size_t size);
  inline ::std::string* mutable_opt();
  inline ::std::string* release_opt();
  inline void set_allocated_opt(::std::string* opt);

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string date = 2;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 2;
  inline const ::std::string& date() const;
  inline void set_date(const ::std::string& value);
  inline void set_date(const char* value);
  inline void set_date(const char* value, size_t size);
  inline ::std::string* mutable_date();
  inline ::std::string* release_date();
  inline void set_allocated_date(::std::string* date);

  // required bytes image = 3;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 3;
  inline const ::std::string& image() const;
  inline void set_image(const ::std::string& value);
  inline void set_image(const char* value);
  inline void set_image(const void* value, size_t size);
  inline ::std::string* mutable_image();
  inline ::std::string* release_image();
  inline void set_allocated_image(::std::string* image);

  // @@protoc_insertion_point(class_scope:protobufUtils.PGImage)
 private:
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_image();
  inline void clear_has_image();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* opt_;
  ::std::string* username_;
  ::std::string* date_;
  ::std::string* image_;
  friend void  protobuf_AddDesc_protobufUtils_2eproto();
  friend void protobuf_AssignDesc_protobufUtils_2eproto();
  friend void protobuf_ShutdownFile_protobufUtils_2eproto();

  void InitAsDefaultInstance();
  static PGImage* default_instance_;
};
// ===================================================================


// ===================================================================

// PGRequest_RankInfo

// required string myRank = 1;
inline bool PGRequest_RankInfo::has_myrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PGRequest_RankInfo::set_has_myrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PGRequest_RankInfo::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PGRequest_RankInfo::clear_myrank() {
  if (myrank_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myrank_->clear();
  }
  clear_has_myrank();
}
inline const ::std::string& PGRequest_RankInfo::myrank() const {
  // @@protoc_insertion_point(field_get:protobufUtils.PGRequest.RankInfo.myRank)
  return *myrank_;
}
inline void PGRequest_RankInfo::set_myrank(const ::std::string& value) {
  set_has_myrank();
  if (myrank_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myrank_ = new ::std::string;
  }
  myrank_->assign(value);
  // @@protoc_insertion_point(field_set:protobufUtils.PGRequest.RankInfo.myRank)
}
inline void PGRequest_RankInfo::set_myrank(const char* value) {
  set_has_myrank();
  if (myrank_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myrank_ = new ::std::string;
  }
  myrank_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobufUtils.PGRequest.RankInfo.myRank)
}
inline void PGRequest_RankInfo::set_myrank(const char* value, size_t size) {
  set_has_myrank();
  if (myrank_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myrank_ = new ::std::string;
  }
  myrank_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobufUtils.PGRequest.RankInfo.myRank)
}
inline ::std::string* PGRequest_RankInfo::mutable_myrank() {
  set_has_myrank();
  if (myrank_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myrank_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobufUtils.PGRequest.RankInfo.myRank)
  return myrank_;
}
inline ::std::string* PGRequest_RankInfo::release_myrank() {
  clear_has_myrank();
  if (myrank_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = myrank_;
    myrank_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PGRequest_RankInfo::set_allocated_myrank(::std::string* myrank) {
  if (myrank_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete myrank_;
  }
  if (myrank) {
    set_has_myrank();
    myrank_ = myrank;
  } else {
    clear_has_myrank();
    myrank_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobufUtils.PGRequest.RankInfo.myRank)
}

// repeated string topUser = 2;
inline int PGRequest_RankInfo::topuser_size() const {
  return topuser_.size();
}
inline void PGRequest_RankInfo::clear_topuser() {
  topuser_.Clear();
}
inline const ::std::string& PGRequest_RankInfo::topuser(int index) const {
  // @@protoc_insertion_point(field_get:protobufUtils.PGRequest.RankInfo.topUser)
  return topuser_.Get(index);
}
inline ::std::string* PGRequest_RankInfo::mutable_topuser(int index) {
  // @@protoc_insertion_point(field_mutable:protobufUtils.PGRequest.RankInfo.topUser)
  return topuser_.Mutable(index);
}
inline void PGRequest_RankInfo::set_topuser(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobufUtils.PGRequest.RankInfo.topUser)
  topuser_.Mutable(index)->assign(value);
}
inline void PGRequest_RankInfo::set_topuser(int index, const char* value) {
  topuser_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobufUtils.PGRequest.RankInfo.topUser)
}
inline void PGRequest_RankInfo::set_topuser(int index, const char* value, size_t size) {
  topuser_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobufUtils.PGRequest.RankInfo.topUser)
}
inline ::std::string* PGRequest_RankInfo::add_topuser() {
  return topuser_.Add();
}
inline void PGRequest_RankInfo::add_topuser(const ::std::string& value) {
  topuser_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobufUtils.PGRequest.RankInfo.topUser)
}
inline void PGRequest_RankInfo::add_topuser(const char* value) {
  topuser_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobufUtils.PGRequest.RankInfo.topUser)
}
inline void PGRequest_RankInfo::add_topuser(const char* value, size_t size) {
  topuser_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobufUtils.PGRequest.RankInfo.topUser)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PGRequest_RankInfo::topuser() const {
  // @@protoc_insertion_point(field_list:protobufUtils.PGRequest.RankInfo.topUser)
  return topuser_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PGRequest_RankInfo::mutable_topuser() {
  // @@protoc_insertion_point(field_mutable_list:protobufUtils.PGRequest.RankInfo.topUser)
  return &topuser_;
}

// repeated string topScore = 3;
inline int PGRequest_RankInfo::topscore_size() const {
  return topscore_.size();
}
inline void PGRequest_RankInfo::clear_topscore() {
  topscore_.Clear();
}
inline const ::std::string& PGRequest_RankInfo::topscore(int index) const {
  // @@protoc_insertion_point(field_get:protobufUtils.PGRequest.RankInfo.topScore)
  return topscore_.Get(index);
}
inline ::std::string* PGRequest_RankInfo::mutable_topscore(int index) {
  // @@protoc_insertion_point(field_mutable:protobufUtils.PGRequest.RankInfo.topScore)
  return topscore_.Mutable(index);
}
inline void PGRequest_RankInfo::set_topscore(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobufUtils.PGRequest.RankInfo.topScore)
  topscore_.Mutable(index)->assign(value);
}
inline void PGRequest_RankInfo::set_topscore(int index, const char* value) {
  topscore_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobufUtils.PGRequest.RankInfo.topScore)
}
inline void PGRequest_RankInfo::set_topscore(int index, const char* value, size_t size) {
  topscore_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobufUtils.PGRequest.RankInfo.topScore)
}
inline ::std::string* PGRequest_RankInfo::add_topscore() {
  return topscore_.Add();
}
inline void PGRequest_RankInfo::add_topscore(const ::std::string& value) {
  topscore_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobufUtils.PGRequest.RankInfo.topScore)
}
inline void PGRequest_RankInfo::add_topscore(const char* value) {
  topscore_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobufUtils.PGRequest.RankInfo.topScore)
}
inline void PGRequest_RankInfo::add_topscore(const char* value, size_t size) {
  topscore_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobufUtils.PGRequest.RankInfo.topScore)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PGRequest_RankInfo::topscore() const {
  // @@protoc_insertion_point(field_list:protobufUtils.PGRequest.RankInfo.topScore)
  return topscore_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PGRequest_RankInfo::mutable_topscore() {
  // @@protoc_insertion_point(field_mutable_list:protobufUtils.PGRequest.RankInfo.topScore)
  return &topscore_;
}

// -------------------------------------------------------------------

// PGRequest

// required string Code = 1;
inline bool PGRequest::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PGRequest::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PGRequest::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PGRequest::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& PGRequest::code() const {
  // @@protoc_insertion_point(field_get:protobufUtils.PGRequest.Code)
  return *code_;
}
inline void PGRequest::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:protobufUtils.PGRequest.Code)
}
inline void PGRequest::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobufUtils.PGRequest.Code)
}
inline void PGRequest::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobufUtils.PGRequest.Code)
}
inline ::std::string* PGRequest::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobufUtils.PGRequest.Code)
  return code_;
}
inline ::std::string* PGRequest::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PGRequest::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobufUtils.PGRequest.Code)
}

// optional string errorInfo = 2;
inline bool PGRequest::has_errorinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PGRequest::set_has_errorinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PGRequest::clear_has_errorinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PGRequest::clear_errorinfo() {
  if (errorinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errorinfo_->clear();
  }
  clear_has_errorinfo();
}
inline const ::std::string& PGRequest::errorinfo() const {
  // @@protoc_insertion_point(field_get:protobufUtils.PGRequest.errorInfo)
  return *errorinfo_;
}
inline void PGRequest::set_errorinfo(const ::std::string& value) {
  set_has_errorinfo();
  if (errorinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errorinfo_ = new ::std::string;
  }
  errorinfo_->assign(value);
  // @@protoc_insertion_point(field_set:protobufUtils.PGRequest.errorInfo)
}
inline void PGRequest::set_errorinfo(const char* value) {
  set_has_errorinfo();
  if (errorinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errorinfo_ = new ::std::string;
  }
  errorinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobufUtils.PGRequest.errorInfo)
}
inline void PGRequest::set_errorinfo(const char* value, size_t size) {
  set_has_errorinfo();
  if (errorinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errorinfo_ = new ::std::string;
  }
  errorinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobufUtils.PGRequest.errorInfo)
}
inline ::std::string* PGRequest::mutable_errorinfo() {
  set_has_errorinfo();
  if (errorinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errorinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobufUtils.PGRequest.errorInfo)
  return errorinfo_;
}
inline ::std::string* PGRequest::release_errorinfo() {
  clear_has_errorinfo();
  if (errorinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errorinfo_;
    errorinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PGRequest::set_allocated_errorinfo(::std::string* errorinfo) {
  if (errorinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errorinfo_;
  }
  if (errorinfo) {
    set_has_errorinfo();
    errorinfo_ = errorinfo;
  } else {
    clear_has_errorinfo();
    errorinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobufUtils.PGRequest.errorInfo)
}

// optional string username = 3;
inline bool PGRequest::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PGRequest::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PGRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PGRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& PGRequest::username() const {
  // @@protoc_insertion_point(field_get:protobufUtils.PGRequest.username)
  return *username_;
}
inline void PGRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:protobufUtils.PGRequest.username)
}
inline void PGRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobufUtils.PGRequest.username)
}
inline void PGRequest::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobufUtils.PGRequest.username)
}
inline ::std::string* PGRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobufUtils.PGRequest.username)
  return username_;
}
inline ::std::string* PGRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PGRequest::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobufUtils.PGRequest.username)
}

// optional string password = 4;
inline bool PGRequest::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PGRequest::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PGRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PGRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& PGRequest::password() const {
  // @@protoc_insertion_point(field_get:protobufUtils.PGRequest.password)
  return *password_;
}
inline void PGRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:protobufUtils.PGRequest.password)
}
inline void PGRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobufUtils.PGRequest.password)
}
inline void PGRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobufUtils.PGRequest.password)
}
inline ::std::string* PGRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobufUtils.PGRequest.password)
  return password_;
}
inline ::std::string* PGRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PGRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobufUtils.PGRequest.password)
}

// optional string score = 5;
inline bool PGRequest::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PGRequest::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PGRequest::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PGRequest::clear_score() {
  if (score_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    score_->clear();
  }
  clear_has_score();
}
inline const ::std::string& PGRequest::score() const {
  // @@protoc_insertion_point(field_get:protobufUtils.PGRequest.score)
  return *score_;
}
inline void PGRequest::set_score(const ::std::string& value) {
  set_has_score();
  if (score_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    score_ = new ::std::string;
  }
  score_->assign(value);
  // @@protoc_insertion_point(field_set:protobufUtils.PGRequest.score)
}
inline void PGRequest::set_score(const char* value) {
  set_has_score();
  if (score_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    score_ = new ::std::string;
  }
  score_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobufUtils.PGRequest.score)
}
inline void PGRequest::set_score(const char* value, size_t size) {
  set_has_score();
  if (score_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    score_ = new ::std::string;
  }
  score_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobufUtils.PGRequest.score)
}
inline ::std::string* PGRequest::mutable_score() {
  set_has_score();
  if (score_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    score_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobufUtils.PGRequest.score)
  return score_;
}
inline ::std::string* PGRequest::release_score() {
  clear_has_score();
  if (score_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = score_;
    score_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PGRequest::set_allocated_score(::std::string* score) {
  if (score_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete score_;
  }
  if (score) {
    set_has_score();
    score_ = score;
  } else {
    clear_has_score();
    score_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobufUtils.PGRequest.score)
}

// repeated string pictures = 6;
inline int PGRequest::pictures_size() const {
  return pictures_.size();
}
inline void PGRequest::clear_pictures() {
  pictures_.Clear();
}
inline const ::std::string& PGRequest::pictures(int index) const {
  // @@protoc_insertion_point(field_get:protobufUtils.PGRequest.pictures)
  return pictures_.Get(index);
}
inline ::std::string* PGRequest::mutable_pictures(int index) {
  // @@protoc_insertion_point(field_mutable:protobufUtils.PGRequest.pictures)
  return pictures_.Mutable(index);
}
inline void PGRequest::set_pictures(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobufUtils.PGRequest.pictures)
  pictures_.Mutable(index)->assign(value);
}
inline void PGRequest::set_pictures(int index, const char* value) {
  pictures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobufUtils.PGRequest.pictures)
}
inline void PGRequest::set_pictures(int index, const char* value, size_t size) {
  pictures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobufUtils.PGRequest.pictures)
}
inline ::std::string* PGRequest::add_pictures() {
  return pictures_.Add();
}
inline void PGRequest::add_pictures(const ::std::string& value) {
  pictures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobufUtils.PGRequest.pictures)
}
inline void PGRequest::add_pictures(const char* value) {
  pictures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobufUtils.PGRequest.pictures)
}
inline void PGRequest::add_pictures(const char* value, size_t size) {
  pictures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobufUtils.PGRequest.pictures)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PGRequest::pictures() const {
  // @@protoc_insertion_point(field_list:protobufUtils.PGRequest.pictures)
  return pictures_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PGRequest::mutable_pictures() {
  // @@protoc_insertion_point(field_mutable_list:protobufUtils.PGRequest.pictures)
  return &pictures_;
}

// optional string pictureDate = 7;
inline bool PGRequest::has_picturedate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PGRequest::set_has_picturedate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PGRequest::clear_has_picturedate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PGRequest::clear_picturedate() {
  if (picturedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picturedate_->clear();
  }
  clear_has_picturedate();
}
inline const ::std::string& PGRequest::picturedate() const {
  // @@protoc_insertion_point(field_get:protobufUtils.PGRequest.pictureDate)
  return *picturedate_;
}
inline void PGRequest::set_picturedate(const ::std::string& value) {
  set_has_picturedate();
  if (picturedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picturedate_ = new ::std::string;
  }
  picturedate_->assign(value);
  // @@protoc_insertion_point(field_set:protobufUtils.PGRequest.pictureDate)
}
inline void PGRequest::set_picturedate(const char* value) {
  set_has_picturedate();
  if (picturedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picturedate_ = new ::std::string;
  }
  picturedate_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobufUtils.PGRequest.pictureDate)
}
inline void PGRequest::set_picturedate(const char* value, size_t size) {
  set_has_picturedate();
  if (picturedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picturedate_ = new ::std::string;
  }
  picturedate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobufUtils.PGRequest.pictureDate)
}
inline ::std::string* PGRequest::mutable_picturedate() {
  set_has_picturedate();
  if (picturedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picturedate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobufUtils.PGRequest.pictureDate)
  return picturedate_;
}
inline ::std::string* PGRequest::release_picturedate() {
  clear_has_picturedate();
  if (picturedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = picturedate_;
    picturedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PGRequest::set_allocated_picturedate(::std::string* picturedate) {
  if (picturedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete picturedate_;
  }
  if (picturedate) {
    set_has_picturedate();
    picturedate_ = picturedate;
  } else {
    clear_has_picturedate();
    picturedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobufUtils.PGRequest.pictureDate)
}

// optional .protobufUtils.PGRequest.RankInfo rankInfo = 8;
inline bool PGRequest::has_rankinfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PGRequest::set_has_rankinfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PGRequest::clear_has_rankinfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PGRequest::clear_rankinfo() {
  if (rankinfo_ != NULL) rankinfo_->::protobufUtils::PGRequest_RankInfo::Clear();
  clear_has_rankinfo();
}
inline const ::protobufUtils::PGRequest_RankInfo& PGRequest::rankinfo() const {
  // @@protoc_insertion_point(field_get:protobufUtils.PGRequest.rankInfo)
  return rankinfo_ != NULL ? *rankinfo_ : *default_instance_->rankinfo_;
}
inline ::protobufUtils::PGRequest_RankInfo* PGRequest::mutable_rankinfo() {
  set_has_rankinfo();
  if (rankinfo_ == NULL) rankinfo_ = new ::protobufUtils::PGRequest_RankInfo;
  // @@protoc_insertion_point(field_mutable:protobufUtils.PGRequest.rankInfo)
  return rankinfo_;
}
inline ::protobufUtils::PGRequest_RankInfo* PGRequest::release_rankinfo() {
  clear_has_rankinfo();
  ::protobufUtils::PGRequest_RankInfo* temp = rankinfo_;
  rankinfo_ = NULL;
  return temp;
}
inline void PGRequest::set_allocated_rankinfo(::protobufUtils::PGRequest_RankInfo* rankinfo) {
  delete rankinfo_;
  rankinfo_ = rankinfo;
  if (rankinfo) {
    set_has_rankinfo();
  } else {
    clear_has_rankinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:protobufUtils.PGRequest.rankInfo)
}

// optional string nickname = 9;
inline bool PGRequest::has_nickname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PGRequest::set_has_nickname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PGRequest::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PGRequest::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& PGRequest::nickname() const {
  // @@protoc_insertion_point(field_get:protobufUtils.PGRequest.nickname)
  return *nickname_;
}
inline void PGRequest::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:protobufUtils.PGRequest.nickname)
}
inline void PGRequest::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobufUtils.PGRequest.nickname)
}
inline void PGRequest::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobufUtils.PGRequest.nickname)
}
inline ::std::string* PGRequest::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobufUtils.PGRequest.nickname)
  return nickname_;
}
inline ::std::string* PGRequest::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PGRequest::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobufUtils.PGRequest.nickname)
}

// -------------------------------------------------------------------

// PGImage

// required string opt = 4;
inline bool PGImage::has_opt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PGImage::set_has_opt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PGImage::clear_has_opt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PGImage::clear_opt() {
  if (opt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_->clear();
  }
  clear_has_opt();
}
inline const ::std::string& PGImage::opt() const {
  // @@protoc_insertion_point(field_get:protobufUtils.PGImage.opt)
  return *opt_;
}
inline void PGImage::set_opt(const ::std::string& value) {
  set_has_opt();
  if (opt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_ = new ::std::string;
  }
  opt_->assign(value);
  // @@protoc_insertion_point(field_set:protobufUtils.PGImage.opt)
}
inline void PGImage::set_opt(const char* value) {
  set_has_opt();
  if (opt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_ = new ::std::string;
  }
  opt_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobufUtils.PGImage.opt)
}
inline void PGImage::set_opt(const char* value, size_t size) {
  set_has_opt();
  if (opt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_ = new ::std::string;
  }
  opt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobufUtils.PGImage.opt)
}
inline ::std::string* PGImage::mutable_opt() {
  set_has_opt();
  if (opt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobufUtils.PGImage.opt)
  return opt_;
}
inline ::std::string* PGImage::release_opt() {
  clear_has_opt();
  if (opt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = opt_;
    opt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PGImage::set_allocated_opt(::std::string* opt) {
  if (opt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opt_;
  }
  if (opt) {
    set_has_opt();
    opt_ = opt;
  } else {
    clear_has_opt();
    opt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobufUtils.PGImage.opt)
}

// required string username = 1;
inline bool PGImage::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PGImage::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PGImage::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PGImage::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& PGImage::username() const {
  // @@protoc_insertion_point(field_get:protobufUtils.PGImage.username)
  return *username_;
}
inline void PGImage::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:protobufUtils.PGImage.username)
}
inline void PGImage::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobufUtils.PGImage.username)
}
inline void PGImage::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobufUtils.PGImage.username)
}
inline ::std::string* PGImage::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobufUtils.PGImage.username)
  return username_;
}
inline ::std::string* PGImage::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PGImage::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobufUtils.PGImage.username)
}

// required string date = 2;
inline bool PGImage::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PGImage::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PGImage::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PGImage::clear_date() {
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_->clear();
  }
  clear_has_date();
}
inline const ::std::string& PGImage::date() const {
  // @@protoc_insertion_point(field_get:protobufUtils.PGImage.date)
  return *date_;
}
inline void PGImage::set_date(const ::std::string& value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(value);
  // @@protoc_insertion_point(field_set:protobufUtils.PGImage.date)
}
inline void PGImage::set_date(const char* value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobufUtils.PGImage.date)
}
inline void PGImage::set_date(const char* value, size_t size) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobufUtils.PGImage.date)
}
inline ::std::string* PGImage::mutable_date() {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobufUtils.PGImage.date)
  return date_;
}
inline ::std::string* PGImage::release_date() {
  clear_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = date_;
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PGImage::set_allocated_date(::std::string* date) {
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_;
  }
  if (date) {
    set_has_date();
    date_ = date;
  } else {
    clear_has_date();
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobufUtils.PGImage.date)
}

// required bytes image = 3;
inline bool PGImage::has_image() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PGImage::set_has_image() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PGImage::clear_has_image() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PGImage::clear_image() {
  if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_->clear();
  }
  clear_has_image();
}
inline const ::std::string& PGImage::image() const {
  // @@protoc_insertion_point(field_get:protobufUtils.PGImage.image)
  return *image_;
}
inline void PGImage::set_image(const ::std::string& value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  image_->assign(value);
  // @@protoc_insertion_point(field_set:protobufUtils.PGImage.image)
}
inline void PGImage::set_image(const char* value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  image_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobufUtils.PGImage.image)
}
inline void PGImage::set_image(const void* value, size_t size) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  image_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobufUtils.PGImage.image)
}
inline ::std::string* PGImage::mutable_image() {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobufUtils.PGImage.image)
  return image_;
}
inline ::std::string* PGImage::release_image() {
  clear_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_;
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PGImage::set_allocated_image(::std::string* image) {
  if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_;
  }
  if (image) {
    set_has_image();
    image_ = image;
  } else {
    clear_has_image();
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobufUtils.PGImage.image)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobufUtils

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobufUtils_2eproto__INCLUDED
